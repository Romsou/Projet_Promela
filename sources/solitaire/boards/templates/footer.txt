
    atomic{
      run player(); run board();
    }
};


proctype board() {
    short x;
    short y;
    byte direction;
    printf("Board start\n");

start:
    move?x,y,direction;
    atomic {
        if
        ::  ((y - 2 >= 0) && (direction == UP))
            -> (((row[y].col[x] == 0)     && (row[y - 2].col[x] == 1)     && (row[y - 1].col[x] == 1)))
            -> printf("Playing [%d,%d] UP\n",x,y); row[y - 2].col[x] = 0; row[y - 1].col[x] = 0; free_slot!x,(y - 2); free_slot!x,(y - 1);
            pegs--;

        ::  ((y - 2 >= 0) && (direction == UP))
            -> (((row[y].col[x] == 0)     && (row[y - 2].col[x] == 1)     && (row[y - 1].col[x] == 1)))
            -> printf("Playing [%d,%d] UP\n",x,y); row[y - 2].col[x] = 0; row[y - 1].col[x] = 0; free_slot!x,(y - 1); free_slot!x,(y - 2);
            pegs--;


        ::  ((x + 2 < BOARD_SIZE) && (direction == RIGHT))
            -> (((row[y].col[x] == 0)     && (row[y].col[x + 2] == 1)     && (row[y].col[x + 1] == 1)))
            -> printf("Playing [%d,%d] RIGHT\n",x,y); row[y].col[x + 2] = 0; row[y].col[x + 1] = 0; free_slot!(x + 2),y; free_slot!(x + 1),y;
            pegs--;

        ::  ((x + 2 < BOARD_SIZE) && (direction == RIGHT))
            -> (((row[y].col[x] == 0)     && (row[y].col[x + 2] == 1)     && (row[y].col[x + 1] == 1)))
            -> printf("Playing [%d,%d] RIGHT\n",x,y); row[y].col[x + 2] = 0; row[y].col[x + 1] = 0; free_slot!(x + 1),y; free_slot!(x + 2),y;
            pegs--;


        ::  ((y + 2 < BOARD_SIZE) && (direction == DOWN))
            -> ((row[y].col[x] == 0)    && (row[y + 2].col[x] == 1)     && (row[y + 1].col[x] == 1))
            -> printf("Playing [%d,%d] DOWN\n",x,y); row[y + 2].col[x] = 0; row[y + 1].col[x] = 0; free_slot!x,(y + 2); free_slot!x,(y + 1);
            pegs--;

        ::  ((y + 2 < BOARD_SIZE) && (direction == DOWN))
            -> ((row[y].col[x] == 0)    && (row[y + 2].col[x] == 1)     && (row[y + 1].col[x] == 1))
            -> printf("Playing [%d,%d] DOWN\n",x,y); row[y + 2].col[x] = 0; row[y + 1].col[x] = 0; free_slot!x,(y + 1); free_slot!x,(y + 2);
            pegs--;


        ::  ((x - 2 >= 0) && (direction == LEFT))
            -> ((row[y].col[x] == 0)    && (row[y].col[x - 2] == 1)     && (row[y].col[x - 1] == 1))
            -> printf("Playing [%d,%d] LEFT\n",x,y); row[y].col[x - 2] = 0; row[y].col[x - 1] = 0; free_slot!(x - 2),y; free_slot!(x - 1),y;
            pegs--;

        ::  ((x - 2 >= 0) && (direction == LEFT))
            -> ((row[y].col[x] == 0)    && (row[y].col[x - 2] == 1)     && (row[y].col[x - 1] == 1))
            -> printf("Playing [%d,%d] LEFT\n",x,y); row[y].col[x - 2] = 0; row[y].col[x - 1] = 0; free_slot!(x - 1),y; free_slot!(x - 2),y;
            pegs--;

        :: else -> free_slot!x,y; ready!1; goto start;
        fi

        row[y].col[x] = 1;
        ready!1;

        goto start;
    };

};

proctype player() {
    short x;
    short y;

    printf("Player start\n");

    do
    :: atomic {free_slot?x,y; move!x,y,UP; ready?1;}
    :: atomic {free_slot?x,y; move!x,y,LEFT; ready?1;}
    :: atomic {free_slot?x,y; move!x,y,DOWN; ready?1;}
    :: atomic {free_slot?x,y; move!x,y,RIGHT; ready?1;}
    od
};

ltl formulae { !(<> (pegs == 1)) }
